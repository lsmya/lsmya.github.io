<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lsmya.github.io</id>
    <title>小书本</title>
    <updated>2020-01-13T07:52:46.152Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lsmya.github.io"/>
    <link rel="self" href="https://lsmya.github.io/atom.xml"/>
    <subtitle>小可爱一起嗨吗</subtitle>
    <logo>https://lsmya.github.io/images/avatar.png</logo>
    <icon>https://lsmya.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 小书本</rights>
    <entry>
        <title type="html"><![CDATA[Mac 关闭 Adobe Creative Cloud]]></title>
        <id>https://lsmya.github.io/Hz9lrueIV</id>
        <link href="https://lsmya.github.io/Hz9lrueIV">
        </link>
        <updated>2019-08-21T00:56:52.000Z</updated>
        <content type="html"><![CDATA[<p>关闭：</p>
<pre><code>launchctl unload -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist
</code></pre>
<p>启用：</p>
<pre><code>launchctl load -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android原生方法与js交互]]></title>
        <id>https://lsmya.github.io/K4mr3AfWs</id>
        <link href="https://lsmya.github.io/K4mr3AfWs">
        </link>
        <updated>2019-07-15T01:16:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="注意一定添加以下配置">注意：一定添加以下配置</h2>
<pre><code>//让WebView支持调用Js
webSettings.setJavaScriptEnabled(true);
//给webview添加Js调用接口
webview.addJavascriptInterface(MainActivity.this,&quot;android&quot;);
</code></pre>
<h3 id="android调用js方法">Android调用js方法</h3>
<p>Android代码：</p>
<pre><code>webview.loadUrl(&quot;javascript:javacallfunc()&quot;);
</code></pre>
<p>js代码：</p>
<pre><code>function javacallfunc(){
}
</code></pre>
<h3 id="js调用android原生方法">js调用Android原生方法</h3>
<p>Android代码：</p>
<pre><code>@JavascriptInterface
public void test(String data) {
}
</code></pre>
<p>js代码：</p>
<pre><code>window.android.test(&quot;需要传递的数据&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UILabel]]></title>
        <id>https://lsmya.github.io/4M_SXdaMQ</id>
        <link href="https://lsmya.github.io/4M_SXdaMQ">
        </link>
        <updated>2019-07-05T10:05:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基础用法">基础用法</h2>
<pre><code>//设置标签x坐标：10，y坐标：20，长：300，宽：100
let label = UILabel(frame:CGRect(x:10, y:20, width:300, height:100))
label.text = &quot;文本&quot;
label.textColor = UIColor.white //白色文字
label.backgroundColor = UIColor.black //黑色背景
label.textAlignment = .right//文字右对齐
label.font = UIFont.systemFont(ofSize: 17)//字体大小
label.numberOfLines = 2//行数，为0时自动换行
self.view.addSubview(label);
</code></pre>
<h2 id="高度随内容自适应">高度随内容自适应</h2>
<pre><code>let labelFont = label?.font
let labelSize = getLabHeigh(labelStr: &quot;文本内容&quot; font: labelFont!, width: 100)
label.numberOfLines = 0//行数一定要设为0
label!.frame = CGRect(x: 0, y: 0, width: 100, height: labelSize)
</code></pre>
<h3 id="获取内容高度">获取内容高度</h3>
<pre><code>private func getLabHeigh(labelStr:String,font:UIFont,width:CGFloat,lineSpacing:CGFloat=0) -&gt; CGFloat {
    let statusLabelText: NSString = labelStr as NSString
    //这里这个height随便给，设为0也可以
    let size = CGSize(width: width, height: 9999)
    //通过富文本来设置行间距
    let paraph = NSMutableParagraphStyle()
    //行间距设置
    paraph.lineSpacing = lineSpacing
    //样式属性集合
    let attributes = [NSAttributedString.Key.font:font,NSAttributedString.Key.paragraphStyle: paraph]
    //boundingRect函数只有NSString可以用
    let strSize = statusLabelText.boundingRect(with: size, options: .usesLineFragmentOrigin, attributes: attributes, context: nil)
    return strSize.height
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UIImageView]]></title>
        <id>https://lsmya.github.io/uiimageview</id>
        <link href="https://lsmya.github.io/uiimageview">
        </link>
        <updated>2019-07-05T09:48:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基础用法">基础用法</h2>
<pre><code>let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 50, height: 50))
imageView.image = UIImage.init(named: &quot;portrait.png&quot;)
imageView.layer.cornerRadius = 10.0
imageView.clipsToBounds = true
</code></pre>
<p>设置图片显示样式</p>
<pre><code>imageView.contentMode = .scaleAspectFit
</code></pre>
<h2 id="添加点击事件">添加点击事件</h2>
<pre><code>let singleTapGesture = UITapGestureRecognizer(target: self, action: #selector(imageClick))
imageView.addGestureRecognizer(singleTapGesture)
imageView.isUserInteractionEnabled = true

@objc func imageClick() {
}
</code></pre>
<h2 id="设为圆角">设为圆角</h2>
<pre><code>imageView.layer.cornerRadius = 10.0
imageView.clipsToBounds = true
</code></pre>
<h2 id="加载网络图片">加载网络图片</h2>
<p>使用 <code>AlamofireImage</code> ，Podfile文件中添加 <code>pod 'AlamofireImage', '~&gt; 3.5'</code>，然后运行pod install</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cocoapods导入依赖包]]></title>
        <id>https://lsmya.github.io/8Cc7bkeRE</id>
        <link href="https://lsmya.github.io/8Cc7bkeRE">
        </link>
        <updated>2019-07-05T06:37:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-配置cocoapods">1、配置CocoaPods</h2>
<p>CocoaPods需要系统内已经安装了ruby，如果没有安装，请先安装。可以使用如下命令：</p>
<pre><code>sudo gem install cocoapods
</code></pre>
<p>安装gem工具。随即使用：</p>
<pre><code>pod setup --verbose
</code></pre>
<p>之后，只要pod目录没有更新，就尽可能使用这个命令（快得多）：</p>
<pre><code>pod install --verbose --no-repo-update
</code></pre>
<p>到此命令执行完毕，cocoapods就可以使用了</p>
<h2 id="2-pod使用">2、pod使用</h2>
<h3 id="打开终端进入到项目目录然后初始化pod">打开终端，进入到项目目录，然后初始化pod</h3>
<pre><code>pod init
</code></pre>
<h3 id="编辑podfile文件">编辑Podfile文件</h3>
<pre><code>source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '10.0'
use_frameworks!
xcodeproj 'SouthSea.xcodeproj'

target 'SouthSea' do
    pod 'Alamofire', '~&gt; 4.7'
    pod 'SwiftyJSON', '~&gt; 4.0'
    pod 'AlamofireImage', '~&gt; 3.5'
	pod 'MJRefresh'
end
</code></pre>
<h3 id="安装-下载依赖包">安装、下载依赖包</h3>
<p>在当前项目目录执行以下命令：</p>
<pre><code>pod install
</code></pre>
<h3 id="打开项目">打开项目</h3>
<p>使用workspace文件打开项目</p>
<h2 id="3-常见问题">3、常见问题</h2>
<h3 id="问题">问题：</h3>
<pre><code>Unable to add a source with url `https://github.com/CocoaPods/Specs.git` named
</code></pre>
<h4 id="解决方案">解决方案：</h4>
<p>执行以下命令：</p>
<pre><code>pod repo add master https://github.com/CocoaPods/Specs.git
</code></pre>
<p>然后提示执行’pod setup’，如果出现</p>
<pre><code>[!] The `master` repo is not a git repo.
</code></pre>
<p>进入/users/用户名/.cocoapods/repos，删除master文件夹，然后再次执行</p>
<pre><code>pod setup
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[swift 小菊花加载动画]]></title>
        <id>https://lsmya.github.io/SviSTMcBY</id>
        <link href="https://lsmya.github.io/SviSTMcBY">
        </link>
        <updated>2019-07-04T02:18:39.000Z</updated>
        <content type="html"><![CDATA[<pre><code>let activityView = UIActivityIndicatorView()
activityView.center = CGPoint(x: self.view.center.x, y: self.view.center.y)
// 停止后，隐藏菊花
activityView.hidesWhenStopped = true
//Style: whiteLarge比较大的白色环形进度条;white白色环形进度条;gray灰色环形进度条
activityView.style = UIActivityIndicatorView.Style.whiteLarge
view.addSubview(self.activityView)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SearchView使用详解]]></title>
        <id>https://lsmya.github.io/b1QSAuPuF</id>
        <link href="https://lsmya.github.io/b1QSAuPuF">
        </link>
        <updated>2019-06-20T03:41:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1创建菜单文件">1.创建菜单文件</h2>
<p>在menu文件夹下新建search.xml文件，文件中重点是 <code>app:actionViewClass=&quot;android.support.v7.widget.SearchView&quot;</code></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;
    &lt;item
        android:id=&quot;@+id/action_search&quot;
        android:icon=&quot;@drawable/ic_menu_search&quot;
        android:title=&quot;@string/search&quot;
        app:actionViewClass=&quot;android.support.v7.widget.SearchView&quot;
        app:showAsAction=&quot;ifRoom&quot; /&gt;

    &lt;item
        android:id=&quot;@+id/action_settings&quot;
        android:orderInCategory=&quot;100&quot;
        android:title=&quot;@string/action_settings&quot;
        app:showAsAction=&quot;never&quot;/&gt;
&lt;/menu&gt;
</code></pre>
<h2 id="2设置searchview的属性">2.设置SearchView的属性</h2>
<ul>
<li>输入类型</li>
</ul>
<pre><code>android:inputType
</code></pre>
<ul>
<li>最大宽度</li>
</ul>
<pre><code>android:maxWidth
</code></pre>
<ul>
<li>搜索图标是否显示在搜索框内</li>
</ul>
<pre><code>mSearchView.setIconifiedByDefault(true);
</code></pre>
<ul>
<li>搜索图标是否显示在搜索框内</li>
</ul>
<pre><code>mSearchView.setIconifiedByDefault(true);
</code></pre>
<ul>
<li>设置搜索框展开时是否显示提交按钮，可不显示</li>
</ul>
<pre><code>mSearchView.setSubmitButtonEnabled(true);
</code></pre>
<ul>
<li>让键盘的回车键设置成搜索</li>
</ul>
<pre><code>mSearchView.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
</code></pre>
<ul>
<li>搜索框是否展开，false表示展开</li>
</ul>
<pre><code>mSearchView.setIconified(false);
</code></pre>
<ul>
<li>获取焦点</li>
</ul>
<pre><code>mSearchView.setFocusable(true); 
mSearchView.requestFocusFromTouch();
</code></pre>
<ul>
<li>设置提示词</li>
</ul>
<pre><code>mSearchView.setQueryHint(“请输入关键词”);
</code></pre>
<ul>
<li>设置输入框文字颜色</li>
</ul>
<pre><code>EditText editText = (EditText) mSearchView.findViewById(android.support.v7.appcompat.R.id.search_src_text); 
editText.setHintTextColor(ContextCompat.getColor(this, R.color.white)); 
editText.setTextColor(ContextCompat.getColor(this, R.color.white));
</code></pre>
<ul>
<li>设置输入框内的文字（false控制设置完内容后是否提交）</li>
</ul>
<pre><code>mSearchView.setQuery(&quot;要设置的内容&quot;, false)
</code></pre>
<h3 id="重写activity的oncreateoptionsmenu方法">重写activity的onCreateOptionsMenu方法</h3>
<pre><code>@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    //引用menu文件
    getMenuInflater().inflate(R.menu.search, menu);
    //找到SearchView并配置相关参数
    MenuItem searchItem = menu.findItem(R.id.action_search);
    SearchView mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);
    //搜索图标是否显示在搜索框内
    mSearchView.setIconifiedByDefault(true);
    //设置搜索框展开时是否显示提交按钮，可不显示
    mSearchView.setSubmitButtonEnabled(true);
    //让键盘的回车键设置成搜索
    mSearchView.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
    //搜索框是否展开，false表示展开
    mSearchView.setIconified(false);
    //获取焦点
    mSearchView.setFocusable(true);
    mSearchView.requestFocusFromTouch();
    //设置提示词
    mSearchView.setQueryHint(&quot;请输入关键字&quot;);
    //设置输入框文字颜色
    EditText editText = (EditText) mSearchView.findViewById(android.support.v7.appcompat.R.id.search_src_text);
    editText.setHintTextColor(ContextCompat.getColor(this, R.color.white));
    editText.setTextColor(ContextCompat.getColor(this, R.color.white));
    return super.onCreateOptionsMenu(menu);
}
</code></pre>
<h2 id="3设置响应监听setonquerytextlistener">3.设置响应监听<code>setOnQueryTextListener</code></h2>
<pre><code>mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
    @Override
    public boolean onQueryTextSubmit(String query) {
        // 当点击搜索按钮时触发该方法
        return false;
    }

    @Override
    public boolean onQueryTextChange(String newText) {
        // 当搜索内容改变时触发该方法
        return false;
    }
});
</code></pre>
<p><code>setOnCloseListener</code> ：输入框被关闭的监听</p>
<p><code>setOnSearchClickListener</code> ：点击搜索按钮时的监听</p>
<p><code>setOnSuggestionListener</code> ：提示内容被选中的监听</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Manifest merger failed with multiple errors, see logs]]></title>
        <id>https://lsmya.github.io/NNY7r7Hh6</id>
        <link href="https://lsmya.github.io/NNY7r7Hh6">
        </link>
        <updated>2019-06-19T06:49:17.000Z</updated>
        <content type="html"><![CDATA[<p>如果出现 <code>Manifest merger failed with multiple errors, see logs</code> 错误信息，可以使用 <code>gradlew processDebugManifest --stacktrace</code> 来查看更加详细的信息</p>
<p>Windows：</p>
<pre><code>gradlew processDebugManifest --stacktrace
</code></pre>
<p>Mac：</p>
<pre><code>./gradlew processDebugManifest --stacktrace
</code></pre>
<p>如果提示 <code>bash: ./gradlew: Permission denied</code>，再执行 <code>chmod +x gradlew</code>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关闭Dialog后软键盘无法关闭问题]]></title>
        <id>https://lsmya.github.io/id0YeYcLY</id>
        <link href="https://lsmya.github.io/id0YeYcLY">
        </link>
        <updated>2019-06-14T07:56:09.000Z</updated>
        <content type="html"><![CDATA[<p>我们经常会为Dialog设置监听 <code>setOnDismissListener</code> 或者 <code>setOnCancelListener</code> 来进行软键盘回收处理，但是此时持有软键盘的 <code>Edittext</code> 对象已经被回收所以无法进行响应处理，最终导致我们无法正常收起软键盘。</p>
<p>解决办法，重写Dialog的 <code>dismiss</code>方法：</p>
<pre><code>@Override
public void dismiss() {
    View view = getCurrentFocus();
    if (view instanceof TextView) {
        InputMethodManager mInputMethodManager = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        mInputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.RESULT_UNCHANGED_SHOWN);
    }
    super.dismiss();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[android常用自定义view、工具类、dialog、http请求、6.0权限申请]]></title>
        <id>https://lsmya.github.io/8Af10DBI2</id>
        <link href="https://lsmya.github.io/8Af10DBI2">
        </link>
        <updated>2019-06-04T14:11:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用说明">使用说明</h1>
<p>在dependencies中添加</p>
<pre><code>implementation 'android.library:util:latest_version'
</code></pre>
<p><a href="https://bintray.com/lovelylsmya/android/util/_latestVersion"> <img src="https://api.bintray.com/packages/lovelylsmya/android/util/images/download.svg" alt="version" loading="lazy"> </a></p>
<h1 id="介绍">介绍</h1>
<p>请注意！！！该库基于androidx编写</p>
<h2 id="dialog">dialog</h2>
<blockquote>
<p>常用底部弹出弹窗、提示确认弹窗</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/BottomClickDialog.java">BottomClickDialog</a></td>
<td style="text-align:left">底部弹出弹窗，宽度为屏幕宽度9/10，实例化时传入layoutid和点击控件id</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/BottomDialogById.java">BottomDialogById</a></td>
<td style="text-align:left">底部弹出弹窗，宽度为屏幕宽度9/10，使用自定义布局id</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/BottomDialogByView.java">BottomDialogByView</a></td>
<td style="text-align:left">底部弹出弹窗，宽度为屏幕宽度9/10，使用自定义布局view</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/BottomWidthDialogById.java">BottomWidthDialogById</a></td>
<td style="text-align:left">底部弹出弹窗，宽度等于屏幕宽度，使用自定义布局id</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/BottomWidthDialogByView.java">BottomWidthDialogByView</a></td>
<td style="text-align:left">底部弹出弹窗，宽度等于屏幕宽度，使用自定义布局view</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/HintDialog.java">HintDialog</a></td>
<td style="text-align:left">仿ios提示弹窗</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/BottomListDialog.java">BottomListDialog</a></td>
<td style="text-align:left">屏幕底部弹出列表dialog，使用String集合数据源生成</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/ChooseListDialog.java">ChooseListDialog</a></td>
<td style="text-align:left">屏幕中间弹出选择列表，数据源集合使用泛型，可适用于多种数据格式的集合数据源</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/dialog/RxDialog.java">RxDialog</a></td>
<td style="text-align:left">确认选择弹窗，可以动态添加按钮数量，调整弹窗位置、宽度，调整弹窗风格（确定式弹窗、带取消按钮的纵向排列式弹窗）</td>
</tr>
</tbody>
</table>
<h2 id="http-使用方法">http <a href="https://github.com/lsmya/AndroidLibrary/blob/master/app/src/main/java/cn/lsmya/androidlibrary/activity/HttpActivity.java">使用方法</a></h2>
<blockquote>
<p>http接口请求，链式调用，支持get、post、post上传文件（支持上传进度回调）、delete、put、根据tag随时取消请求、随时更换baseUrl，请求前拦截为接口重新配置，可以更换url、修改请求方法、设置请求头甚至重新发起一个全新的请求</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/http/Api.java">Api</a></td>
<td style="text-align:left">http请求的操作类，支持get、post（form、json、form+file）、delete（form、json）、put(form、json)等请求，根据tag取消请求</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/http/ApiInitialize.java">ApiInitialize</a></td>
<td style="text-align:left">提供http请求的初始化操作，初始化OkHttp、设置baseUrl、开启debug日志输出、设置请求前拦截回调方法</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/http/ApiCallBack.java">ApiCallBack</a></td>
<td style="text-align:left">http请求结果的回调类，支持请求前、请求成功、请求失败、请求取消、请求结束</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/http/ApiProgressListener.java">ApiProgressListener</a></td>
<td style="text-align:left">上传文件时的上传进度回调</td>
</tr>
</tbody>
</table>
<h2 id="easypermission使用方法">EasyPermission<a href="https://github.com/lsmya/AndroidLibrary/blob/master/permission.md">使用方法</a></h2>
<blockquote>
<p>只需三行代码即可完成权限申请处理</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/permission/EasyPermission.java">EasyPermission</a></td>
<td style="text-align:left">权限申请处理工具类</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/permission/OnEasyPermissionListener.java">OnEasyPermissionListener</a></td>
<td style="text-align:left">权限申请结果回调</td>
</tr>
</tbody>
</table>
<h2 id="自定义view">自定义view</h2>
<blockquote>
<p>收集一些常用的自定义View</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/view/CircleImageView.java">CircleImageView</a></td>
<td style="text-align:left">圆形的ImageView</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/view/ImageSquareView.java">ImageSquareView</a></td>
<td style="text-align:left">正方形的ImageView（高度由宽度决定）</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/view/PickerView">PickerView</a></td>
<td style="text-align:left">类似于NumberPicker的选择器</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/view/RoundImageView.java">RoundImageView</a></td>
<td style="text-align:left">圆角的ImageView</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/view/ShapeTextView.java">ShapeTextView</a></td>
<td style="text-align:left">支持圆角、边框的TextView,无需编写drawable文件</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/rx/library/kit/view/ProgressView.java">ProgressView</a></td>
<td style="text-align:left">圆环式进度条，圆心显示数字进度</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[svn连接https报错问题: E230001: Server SSL certificate verification failed: certificate issued]]></title>
        <id>https://lsmya.github.io/4nYuIAmMV</id>
        <link href="https://lsmya.github.io/4nYuIAmMV">
        </link>
        <updated>2019-06-04T06:30:15.000Z</updated>
        <content type="html"><![CDATA[<p>打开终端，输入以下命令后回车：</p>
<pre><code>svn ls url
</code></pre>
<p><code>url</code>需要改为svn的项目地址<br>
执行完成后最后一行会显示：</p>
<pre><code>(R)eject, accept (t)emporarily or accept (p)ermanently?
</code></pre>
<p>在 ? 后面输入 <code>p</code>  然后回车，最后根据提示信息输入对应svn账号的密码即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android APP应用启动页白屏优化(StartingWindow)]]></title>
        <id>https://lsmya.github.io/BB2sAujIU</id>
        <link href="https://lsmya.github.io/BB2sAujIU">
        </link>
        <updated>2019-05-29T08:37:20.000Z</updated>
        <content type="html"><![CDATA[<p>StartingWindow 的处理方式大概有三种：在此推荐第二种方式，着重介绍一下第二种方式，即：自己定制简单的StartingWindow，越简单越好，</p>
<h4 id="使用系统默认的startingwindow">使用系统默认的StartingWindow</h4>
<p>用户点了应用图标启动应用，马上弹出系统默认的StartingWindow，等应用加载好第一帧之后，StartingWindow消失，显示应用第一帧，无缝衔接，体验还不错，这也是通常大部分 Android 应用的场景；</p>
<h4 id="自己定制简单的-startingwindow">自己定制简单的 StartingWindow</h4>
<p>用户点了应用图标启动应用，弹出应用自己定制的StartingWindow，等应用加载好第一帧之后，定制的 StartingWindow 消失，显示应用主界面，由于StartingWindow是自己定制的，启动的时候 Decode Bitmap 或者 Inflate 自定义 Layout 会有一定的耗时，但是总的来说与系统默认的差别不大，用户体验挺好</p>
<ul>
<li>在style.xml中添加以下代码</li>
</ul>
<pre><code>&lt;style name=&quot;StartingTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;
	&lt;!-- 可以设置为颜色 --&gt;
	&lt;!--&lt;item name=&quot;android:windowBackground&quot;&gt;@color/red&lt;/item&gt;--&gt;
	&lt;!--可以设置成一张图片 --&gt;
	&lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/image&lt;/item&gt;
&lt;/style&gt;
</code></pre>
<ul>
<li>在AndroidManifest.xml中给启动activity设置自定义的theme</li>
</ul>
<pre><code>&lt;activity
    android:name=&quot;.MainActivity&quot;
    android:theme=&quot;@style/StartingTheme&quot;&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre>
<h4 id="把startingwindow禁掉或者设置透明">把StartingWindow禁掉或者设置透明</h4>
<p>用户点了应用图标启动应用，由于StartingWindow被禁掉或者被设置透明，所以会出现点击图标后，除了图标黑一下之外没有任何响应，过一会（取决于应用第一帧的加载速度，几秒的时间），直接显示应用主界面。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ImageView的scaleType属性]]></title>
        <id>https://lsmya.github.io/k99RZfK</id>
        <link href="https://lsmya.github.io/k99RZfK">
        </link>
        <updated>2019-05-16T10:03:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1androidscaletypecenter">1.android:scaleType=&quot;center&quot;</h3>
<p>保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size时，多出来的部分被截掉。</p>
<h3 id="2androidscaletypecenterinside">2.android:scaleType=&quot;centerInside&quot;</h3>
<p>以原图正常显示为目的，如果原图大小大于ImageView的size，就按照比例缩小原图的宽高，居中显示在ImageView中。如果原图size小于ImageView的size，则不做处理居中显示图片。</p>
<h3 id="3androidscaletypecentercrop">3.android:scaleType=&quot;centerCrop&quot;</h3>
<p>以原图填满ImageView为目的，如果原图size大于ImageView的size，则与center_inside一样，按比例缩小，居中显示在ImageView上。如果原图size小于ImageView的size，则按比例拉升原图的宽和高，填充ImageView居中显示。</p>
<h3 id="4androidscaletypematrix">4.android:scaleType=&quot;matrix&quot;</h3>
<p>不改变原图的大小，从ImageView的左上角开始绘制，超出部分做剪切处理。</p>
<h3 id="5androdscaletypefitxy">5.androd:scaleType=&quot;fitXY&quot;</h3>
<p>把图片按照指定的大小在ImageView中显示，拉伸显示图片，不保持原比例，填满ImageView.</p>
<h3 id="6androidscaletypefitstart">6.android:scaleType=&quot;fitStart&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageView的start（前部/上部）。</p>
<h3 id="7androidsacletypefitcenter">7.android:sacleType=&quot;fitCenter&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageView的center（中部/居中显示）。</p>
<h3 id="8androidscaletypefitend">8.android:scaleType=&quot;fitEnd&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageVIew的end（后部/尾部/底部）</p>
<p>效果图：<br>
<img src="https://lsmya.github.io/post-images/1558318886658.png" alt="" loading="lazy"><br>
原图：<br>
<img src="https://lsmya.github.io/post-images/1558318892111.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[无法通过“application/vnd.android.package-archive” action安装应用]]></title>
        <id>https://lsmya.github.io/DM3QDjJEx</id>
        <link href="https://lsmya.github.io/DM3QDjJEx">
        </link>
        <updated>2019-05-16T08:00:27.000Z</updated>
        <content type="html"><![CDATA[<p>targetsdkversion大于25必须声明REQUEST_INSTALL_PACKAGES权限</p>
<h3 id="解决办法">解决办法</h3>
<p>在AndroidManifest中加入</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot; /&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[targetSdkVersion 28 http请求报错CLEARTEXT communication to *** not permitted by network security policy]]></title>
        <id>https://lsmya.github.io/cB7Rhv9_D</id>
        <link href="https://lsmya.github.io/cB7Rhv9_D">
        </link>
        <updated>2019-05-16T07:53:16.000Z</updated>
        <content type="html"><![CDATA[<p>从6.0开始Android引入了对Https的推荐支持，但是P（api28）的系统上面默认所有Http的请求都被拦截<br>
<application android:usesCleartextTraffic="true|false"><br>
原本这个属性的默认值为true</p>
<h3 id="解决办法">解决办法</h3>
<p>在AnroidManifest.xml中的application添加：</p>
<pre><code>&lt;application android:usesCleartextTraffic=&quot;true&quot;&gt;
</code></pre>
<p>但是更好的解决办法是在应用程序中使用https的请求</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[recyclerView的item点击事件在onCreateViewHolder中写和在onBindViewHolder中写有何区别？如何优化？]]></title>
        <id>https://lsmya.github.io/Ibf3l7ix0</id>
        <link href="https://lsmya.github.io/Ibf3l7ix0">
        </link>
        <updated>2019-05-13T01:58:11.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h5 id="1在oncreateviewholder中写">1.在onCreateViewHolder中写</h5>
</li>
</ul>
<pre><code>@NonNull
@Override
public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
    final View view = LayoutInflater.from(mContext).inflate(R.layout.item, parent, false);
    final ViewHolder holder = new ViewHolder(view);
    view.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (listener != null) {
                listener.onItemClick(view, holder.getLayoutPosition());
            }
        }
    });
    return holder;
}
</code></pre>
<ul>
<li>
<h5 id="2在onbindviewholder中写">2.在onBindViewHolder中写</h5>
</li>
</ul>
<pre><code>@Override
public void onBindViewHolder(@NonNull final ViewHolder holder, int position) {
    holder.itemView.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (listener != null) {
                listener.onItemClick(holder.itemView, position);
            }
        }
    });
}
</code></pre>
<p>在onBindViewHolder中会频繁的创建新的onClickListener实例，建议在onCreateViewHolder中为新建的 View 设置点击事件</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[xcode控制台打印 CUIThemeStore：No theme registered with id=0]]></title>
        <id>https://lsmya.github.io/IdZIG9X8L</id>
        <link href="https://lsmya.github.io/IdZIG9X8L">
        </link>
        <updated>2019-05-09T03:34:36.000Z</updated>
        <content type="html"><![CDATA[<p>在 Assets.xcassets 文件夹中添加AppIcon之后，Xcode控制台就不会再打印CUIThemeStore: No theme registered with id=0</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ios--解决 Reading from private effective user settings]]></title>
        <id>https://lsmya.github.io/AsZIYRD5z</id>
        <link href="https://lsmya.github.io/AsZIYRD5z">
        </link>
        <updated>2019-05-09T03:12:23.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>在Xcode顶部菜单栏选择：Product --&gt; Scheme --&gt; Edit Scheme</li>
<li>在左边的菜单栏中选择：Run --&gt; Arguments</li>
<li>在 Environment Variables 点击添加按钮，添加变量名为 OS_ACTIVITY_MODE 的变量，Value为 NO</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android第三方登录（QQ、WeChat）]]></title>
        <id>https://lsmya.github.io/androidLogin</id>
        <link href="https://lsmya.github.io/androidLogin">
        </link>
        <updated>2019-04-30T07:16:09.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://github.com/lsmya/LoginDemo">GitHub地址</a></p>
<h3 id="支持微信-qq-微博等第三方登录">支持微信、QQ、微博等第三方登录</h3>
<pre><code>api 'com.github:otherlogin:+'
</code></pre>
<p><a href="https://bintray.com/lovelylsmya/maven/otherlogin/_latestVersion"> <img src="https://api.bintray.com/packages/lovelylsmya/maven/otherlogin/images/download.svg" alt="Download" loading="lazy"> </a></p>
<h4 id="1-微信登录">1、微信登录</h4>
<ul>
<li>注册微信APP_ID：</li>
</ul>
<pre><code>IWXAPI iwxapi = WeChatUtil.register(this, WXAPP_ID);
</code></pre>
<ul>
<li>在需要打开微信的地方使用(需要传入注册时返回的IWXAPI)：</li>
</ul>
<pre><code> WeChatUtil.openWeChat(iwxapi);
</code></pre>
<ul>
<li>在根目录下新建wxapi文件夹，里面新建一个activity（WXEntryActivity）继承自BaseWXEntryActivity</li>
</ul>
<pre><code>public class WXEntryActivity extends BaseWXEntryActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wxentry);
    }
    @Override
    public void success(BaseResp baseResp, SendAuth.Resp resp) {
        //打开微信并回调成功
    }
    @Override
    public void cancel(BaseResp baseResp, SendAuth.Resp resp) {
        //打开微信后取消
    }
    @Override
    public void denied(BaseResp baseResp, SendAuth.Resp resp) {
        //打开微信被拒绝
    }
}

</code></pre>
<h4 id="2-qq登录">2、QQ登录</h4>
<ul>
<li>打开手机QQ</li>
</ul>
<pre><code>Tencentutil.openQQ(MainActivity.this, &quot;app_id&quot;, iUiListener);
</code></pre>
<ul>
<li>在onActivityResult回调中增加如下代码：</li>
</ul>
<pre><code>if (requestCode == 11101){
    Tencent.onActivityResultData(requestCode, resultCode, data, iUiListener);
}
</code></pre>
<ul>
<li>修改主工程的build.gradle文件，android标签内的defaultConfig里面增加如下代码：</li>
</ul>
<pre><code>manifestPlaceholders = [tencent_app_id: &quot;你的appId&quot;]
</code></pre>
<ul>
<li>打开手机QQ时传入的IUiListener对象的onComplete(Object o)方法会返回你想要的数据</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android使用Lambda表达式]]></title>
        <id>https://lsmya.github.io/-tCqrpiVs</id>
        <link href="https://lsmya.github.io/-tCqrpiVs">
        </link>
        <updated>2019-04-25T03:53:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="jdk-8以上">JDK 8以上</h3>
<h3 id="在主工程的buildgradle中的buildtypes下添加">在主工程的build.gradle中的buildTypes下添加</h3>
<pre><code> compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
</code></pre>
<h3 id="在主工程添加完之后记得在module里面添加一下要不然会报错不知大家有没有遇到">在主工程添加完之后记得在Module里面添加一下，要不然会报错，不知大家有没有遇到</h3>
<h3 id="代码混淆">代码混淆</h3>
<pre><code>-dontwarn java.lang.invoke.*
-dontwarn **$$Lambda$*
</code></pre>
<p>到此就可以使用Lambda表达式了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android 依赖库发布（上传 Library 到 JCenter）]]></title>
        <id>https://lsmya.github.io/lgewWsqKB</id>
        <link href="https://lsmya.github.io/lgewWsqKB">
        </link>
        <updated>2019-04-25T03:48:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1注册-bintray">1.注册<a href="https://bintray.com"> Bintray</a></h3>
<p>注册时要注意哦，千万不要注册成组织的账户，一定要注册为个人。因为组织账户只有一个月的免费使用时间。<br>
个人账户注册地址：https://bintray.com/signup/oss<br>
有Github、Google、Twitter账号的可以直接登录哦</p>
<h3 id="2创建maven仓库仓库名可自定义">2.创建Maven仓库（仓库名可自定义）</h3>
<p>个人首页中点击Add New Repository，仓库名必须为：maven ，否则使用命令行提交时会报错<br>
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a811411c3?w=500&amp;h=500&amp;f=png&amp;s=9889" alt="" loading="lazy"><br>
然后填完基本信息后点击create，这样就创建了仓库。</p>
<h3 id="3配置项目">3.配置项目</h3>
<p>在项目的build.gradle中配置如下：</p>
<pre><code>buildscript {
    ext.kotlin_version = '1.2.51'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;

        classpath 'com.novoda:bintray-release:0.8.1'
        //AS3.0以上版本使用时com.novoda:bintray-release使用最新版本
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs &lt;&lt; &quot;-Xlint:unchecked&quot; &lt;&lt; &quot;-Xlint:deprecation&quot;
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
//依赖中有中文注释,防止乱码
allprojects {
    tasks.withType(Javadoc) {
        options {
            encoding &quot;UTF-8&quot;
            charSet 'UTF-8'
            links &quot;http://docs.oracle.com/javase/7/docs/api&quot;
        }
    }
}
//含有kotlin类时需要添加
tasks.getByPath(&quot;:${library依赖名}:releaseAndroidJavadocs&quot;).enabled = false
</code></pre>
<p>注意：<br>
bintray-release对应的Gradle版本：</p>
<pre><code>bintray-releas version   0.9  对应 Gradle  是 version  5.1.1
bintray-releas version   0.8.0+  对应 Gradle  是 version  4.1+ (包括4.1)(4.5 不适用)
bintray-releas version   0.7.0  对应 Gradle  是 version  4.1+ (包括4.1)
bintray-releas version   0.6.1  对应 Gradle  是 version  4.1+ (包括4.1)
bintray-releas version   0.5.0  对应 Gradle  是 version  3.4+ (包括3.4)
bintray-releas version   0.4.0  对应 Gradle  是 version  3.3+ (包括3.3)
bintray-releas version   0.3.4  对应 Gradle  是 version  1.3.0+(包括1.3)
</code></pre>
<p>要发布的 module 下的 build.gradle 中添加如下配置：</p>
<pre><code>apply plugin: 'com.novoda.bintray-release'

//添加
publish {
    repoName=&quot;maven&quot;//仓库名，没有填写时默认仓库是maven
    userOrg = 'lsmya'//bintray.com用户名
    groupId = 'cn.lsmya.fastframe'//jcenter上的路径
    artifactId = 'fastframe'//项目名称
    publishVersion = '1.0.1'//版本号
    desc = 'Android rapid development framework'//描述
    website = 'https://github.com/lsmya/fastFrame'//github上的地址
}
</code></pre>
<p>apikey的获取：<br>
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a814b3569?w=236&amp;h=269&amp;f=png&amp;s=18879" alt="image.png" loading="lazy"><br>
点击Edit Profile，然后左侧菜单列表找到API Key，点击show即可查看，也可点击show右边的按钮复制到剪切板<br>
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a816b59ca?w=907&amp;h=425&amp;f=png&amp;s=32385" alt="image.png" loading="lazy"></p>
<p>完成三个地方的配置后，就可以通过命令把项目上传到 Bintray 了。</p>
<h3 id="4上传项目到bintray">4.上传项目到Bintray</h3>
<p>在Android Studio的终端（Terminal）中使用命令行:<br>
Win请使用：</p>
<pre><code>gradlew clean build bintrayUpload  -PbintrayUser=${your_username}  -PbintrayKey=${your_apikey}  -PdryRun=false
</code></pre>
<p>Mac请使用：</p>
<pre><code>./gradlew clean build bintrayUpload  -PbintrayUser=${your_username}  -PbintrayKey=${your_apikey}   -PdryRun=false
</code></pre>
<p>PbintrayUser：登录binary网站的用户名。<br>
PbintrayKey：上面提到的apikey。<br>
dryRun：一个配置参数，当为true的时候，会进行所有步骤，但是不会上传到binary。</p>
<p>回车之后等待编译打包，出现 BUILD SUCCESS，则表示上传成功。<br>
回到Bintray的首页点击之前创建的Maven仓库就可以看到上传的library了</p>
<h3 id="5将项目发布到jcenter">5.将项目发布到JCenter</h3>
<p>点击Add to JCenter，在新页面中点击Send，之后就等待Bintrary的审核吧，如果审核通过会以邮件通知你。<br>
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a816f91b0?w=1179&amp;h=714&amp;f=png&amp;s=94905" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OkHttp3使用]]></title>
        <id>https://lsmya.github.io/okhttp3</id>
        <link href="https://lsmya.github.io/okhttp3">
        </link>
        <updated>2019-04-25T03:28:35.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h3 id="添加依赖">添加依赖</h3>
</li>
</ul>
<pre><code>implementation 'com.squareup.okhttp3:okhttp:3.11.0'
</code></pre>
<p>目前最新的稳定版可能已经不是<code>3.11.0</code>了，可以到官方GitHub来查看最新版本 <a href="https://github.com/square/okhttp">https://github.com/square/okhttp</a></p>
<p>okio最新地址：<a href="https://github.com/square/okio">https://github.com/square/okio</a></p>
<ul>
<li>
<h3 id="异步get">异步GET</h3>
</li>
</ul>
<pre><code>String url = &quot;http://wwww.baidu.com&quot;;
OkHttpClient mOkHttpClient = new OkHttpClient();
Request mRequest = new Request.Builder()
        .url(url)
        .addHeader(&quot;key&quot;, &quot;value&quot;)
        .get()//默认就是GET请求，可以不写
        .build();
mOkHttpClient.newCall(mRequest).enqueue(new Callback() {
    @Override
    public void onFailure(Call call, IOException e) {
    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {
        String data = response.body().string();//返回数据
    }
});
</code></pre>
<ul>
<li>
<h3 id="异步post提交表单">异步POST提交表单</h3>
</li>
</ul>
<p>与GET相比，POST多了一个请求体（RequestBody）</p>
<pre><code>String url = &quot;&quot;;
OkHttpClient mOkHttpClient = new OkHttpClient();
RequestBody requestBody = new FormBody.Builder()
        .add(&quot;key&quot;, &quot;value&quot;)
        .build();
Request mRequest = new Request.Builder()
        .url(url)
        .post(requestBody)
        .build();

mOkHttpClient.newCall(mRequest).enqueue(new Callback() {
    @Override
    public void onFailure(Call call, IOException e) {
    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {
    }
});
</code></pre>
<ul>
<li>
<h3 id="异步post提交字符串">异步POST提交字符串</h3>
</li>
</ul>
<pre><code>String url = &quot;&quot;;
MediaType mediaType = MediaType.parse(&quot;application/json; charset=utf-8&quot;);
String requestBody = &quot;I'm String&quot;;
Request request = new Request.Builder()
        .url(url)
        .post(RequestBody.create(mediaType, requestBody))
        .build();
OkHttpClient okHttpClient = new OkHttpClient();
okHttpClient.newCall(request).enqueue(new Callback() {
    @Override
    public void onFailure(Call call, IOException e) {
    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {
    }
});
</code></pre>
<ul>
<li>
<h3 id="post同时上传文件和参数">POST同时上传文件和参数</h3>
</li>
</ul>
<pre><code>OkHttpClient mOkHttpClient = new OkHttpClient();
String url = &quot;&quot;;
File file = new File(&quot;path&quot;);
String TYPE = &quot;application/octet-stream&quot;;
RequestBody fileBody = RequestBody.create(MediaType.parse(TYPE), file);
RequestBody requestBody = new MultipartBody.Builder()
        .addFormDataPart(&quot;key&quot;, &quot;value&quot;)
        .setType(MultipartBody.FORM)
        .addFormDataPart(&quot;fileKey&quot;, file.getName(), fileBody)
        .build();

Request request = new Request.Builder()
        .url(url)
        .addHeader(&quot;key&quot;, &quot;value&quot;)
        .post(requestBody)
        .build();

mOkHttpClient.newCall(request).enqueue(new Callback() {
    @Override
    public void onFailure(Call call, IOException e) {

    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {

    }
});
</code></pre>
]]></content>
    </entry>
</feed>