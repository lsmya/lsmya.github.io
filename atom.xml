<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lsmya.github.io</id>
    <title>小书本</title>
    <updated>2019-06-20T03:58:01.761Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lsmya.github.io"/>
    <link rel="self" href="https://lsmya.github.io/atom.xml"/>
    <subtitle>&lt;p style=&quot;text-align: center&quot;&gt;小可爱一起嗨吗&lt;/p&gt;</subtitle>
    <logo>https://lsmya.github.io/images/avatar.png</logo>
    <icon>https://lsmya.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 小书本</rights>
    <entry>
        <title type="html"><![CDATA[SearchView使用详解]]></title>
        <id>https://lsmya.github.io/post/b1QSAuPuF</id>
        <link href="https://lsmya.github.io/post/b1QSAuPuF">
        </link>
        <updated>2019-06-20T03:41:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1创建菜单文件">1.创建菜单文件</h2>
<p>在menu文件夹下新建search.xml文件，文件中重点是 <code>app:actionViewClass=&quot;android.support.v7.widget.SearchView&quot;</code></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;
    &lt;item
        android:id=&quot;@+id/action_search&quot;
        android:icon=&quot;@drawable/ic_menu_search&quot;
        android:title=&quot;@string/search&quot;
        app:actionViewClass=&quot;android.support.v7.widget.SearchView&quot;
        app:showAsAction=&quot;ifRoom&quot; /&gt;

    &lt;item
        android:id=&quot;@+id/action_settings&quot;
        android:orderInCategory=&quot;100&quot;
        android:title=&quot;@string/action_settings&quot;
        app:showAsAction=&quot;never&quot;/&gt;
&lt;/menu&gt;
</code></pre>
<h2 id="2设置searchview的属性">2.设置SearchView的属性</h2>
<ul>
<li>输入类型</li>
</ul>
<pre><code>android:inputType
</code></pre>
<ul>
<li>最大宽度</li>
</ul>
<pre><code>android:maxWidth
</code></pre>
<ul>
<li>搜索图标是否显示在搜索框内</li>
</ul>
<pre><code>mSearchView.setIconifiedByDefault(true);
</code></pre>
<ul>
<li>搜索图标是否显示在搜索框内</li>
</ul>
<pre><code>mSearchView.setIconifiedByDefault(true);
</code></pre>
<ul>
<li>设置搜索框展开时是否显示提交按钮，可不显示</li>
</ul>
<pre><code>mSearchView.setSubmitButtonEnabled(true);
</code></pre>
<ul>
<li>让键盘的回车键设置成搜索</li>
</ul>
<pre><code>mSearchView.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
</code></pre>
<ul>
<li>搜索框是否展开，false表示展开</li>
</ul>
<pre><code>mSearchView.setIconified(false);
</code></pre>
<ul>
<li>获取焦点</li>
</ul>
<pre><code>mSearchView.setFocusable(true); 
mSearchView.requestFocusFromTouch();
</code></pre>
<ul>
<li>设置提示词</li>
</ul>
<pre><code>mSearchView.setQueryHint(“请输入关键词”);
</code></pre>
<ul>
<li>设置输入框文字颜色</li>
</ul>
<pre><code>EditText editText = (EditText) mSearchView.findViewById(android.support.v7.appcompat.R.id.search_src_text); 
editText.setHintTextColor(ContextCompat.getColor(this, R.color.white)); 
editText.setTextColor(ContextCompat.getColor(this, R.color.white));
</code></pre>
<ul>
<li>设置输入框内的文字（false控制设置完内容后是否提交）</li>
</ul>
<pre><code>mSearchView.setQuery(&quot;要设置的内容&quot;, false)
</code></pre>
<h3 id="重写activity的oncreateoptionsmenu方法">重写activity的onCreateOptionsMenu方法</h3>
<pre><code>@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    //引用menu文件
    getMenuInflater().inflate(R.menu.search, menu);
    //找到SearchView并配置相关参数
    MenuItem searchItem = menu.findItem(R.id.action_search);
    SearchView mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);
    //搜索图标是否显示在搜索框内
    mSearchView.setIconifiedByDefault(true);
    //设置搜索框展开时是否显示提交按钮，可不显示
    mSearchView.setSubmitButtonEnabled(true);
    //让键盘的回车键设置成搜索
    mSearchView.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
    //搜索框是否展开，false表示展开
    mSearchView.setIconified(false);
    //获取焦点
    mSearchView.setFocusable(true);
    mSearchView.requestFocusFromTouch();
    //设置提示词
    mSearchView.setQueryHint(&quot;请输入关键字&quot;);
    //设置输入框文字颜色
    EditText editText = (EditText) mSearchView.findViewById(android.support.v7.appcompat.R.id.search_src_text);
    editText.setHintTextColor(ContextCompat.getColor(this, R.color.white));
    editText.setTextColor(ContextCompat.getColor(this, R.color.white));
    return super.onCreateOptionsMenu(menu);
}
</code></pre>
<h2 id="3设置响应监听setonquerytextlistener">3.设置响应监听<code>setOnQueryTextListener</code></h2>
<pre><code>mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
    @Override
    public boolean onQueryTextSubmit(String query) {
        // 当点击搜索按钮时触发该方法
        return false;
    }

    @Override
    public boolean onQueryTextChange(String newText) {
        // 当搜索内容改变时触发该方法
        return false;
    }
});
</code></pre>
<p><code>setOnCloseListener</code> ：输入框被关闭的监听</p>
<p><code>setOnSearchClickListener</code> ：点击搜索按钮时的监听</p>
<p><code>setOnSuggestionListener</code> ：提示内容被选中的监听</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Manifest merger failed with multiple errors, see logs]]></title>
        <id>https://lsmya.github.io/post/NNY7r7Hh6</id>
        <link href="https://lsmya.github.io/post/NNY7r7Hh6">
        </link>
        <updated>2019-06-19T06:49:17.000Z</updated>
        <content type="html"><![CDATA[<p>如果出现 <code>Manifest merger failed with multiple errors, see logs</code> 错误信息，可以使用 <code>gradlew processDebugManifest --stacktrace</code> 来查看更加详细的信息</p>
<p>Windows：</p>
<pre><code>gradlew processDebugManifest --stacktrace
</code></pre>
<p>Mac：</p>
<pre><code>./gradlew processDebugManifest --stacktrace
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关闭Dialog后软键盘无法关闭问题]]></title>
        <id>https://lsmya.github.io/post/id0YeYcLY</id>
        <link href="https://lsmya.github.io/post/id0YeYcLY">
        </link>
        <updated>2019-06-14T07:56:09.000Z</updated>
        <content type="html"><![CDATA[<p>我们经常会为Dialog设置监听 <code>setOnDismissListener</code> 或者 <code>setOnCancelListener</code> 来进行软键盘回收处理，但是此时持有软键盘的 <code>Edittext</code> 对象已经被回收所以无法进行响应处理，最终导致我们无法正常收起软键盘。</p>
<p>解决办法，重写Dialog的 <code>dismiss</code>方法：</p>
<pre><code>@Override
public void dismiss() {
    View view = getCurrentFocus();
    if (view instanceof TextView) {
        InputMethodManager mInputMethodManager = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        mInputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.RESULT_UNCHANGED_SHOWN);
    }
    super.dismiss();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[android常用自定义view、工具类、dialog、http请求、6.0权限申请]]></title>
        <id>https://lsmya.github.io/post/8Af10DBI2</id>
        <link href="https://lsmya.github.io/post/8Af10DBI2">
        </link>
        <updated>2019-06-04T14:11:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用说明">使用说明</h1>
<p>在dependencies中添加</p>
<pre><code>implementation 'android.library:util:+'
</code></pre>
<p><a href="https://bintray.com/lovelylsmya/android/util/_latestVersion"> <img src="https://api.bintray.com/packages/lovelylsmya/android/util/images/download.svg" alt="version"> </a></p>
<h1 id="介绍">介绍</h1>
<p>请注意！！！该库基于androidx编写</p>
<h2 id="dialog">dialog</h2>
<blockquote>
<p>常用底部弹出弹窗、提示确认弹窗</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/BottomClickDialog.java">BottomClickDialog</a></td>
<td style="text-align:left">底部弹出弹窗，宽度为屏幕宽度9/10，实例化时传入layoutid和点击控件id</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/BottomDialogById.java">BottomDialogById</a></td>
<td style="text-align:left">底部弹出弹窗，宽度为屏幕宽度9/10，使用自定义布局id</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/BottomDialogByView.java">BottomDialogByView</a></td>
<td style="text-align:left">底部弹出弹窗，宽度为屏幕宽度9/10，使用自定义布局view</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/BottomWidthDialogById.java">BottomWidthDialogById</a></td>
<td style="text-align:left">底部弹出弹窗，宽度等于屏幕宽度，使用自定义布局id</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/BottomWidthDialogByView.java">BottomWidthDialogByView</a></td>
<td style="text-align:left">底部弹出弹窗，宽度等于屏幕宽度，使用自定义布局view</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/HintDialog.java">HintDialog</a></td>
<td style="text-align:left">仿ios提示弹窗</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/BottomListDialog.java">BottomListDialog</a></td>
<td style="text-align:left">屏幕底部弹出列表dialog，使用String集合数据源生成</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/dialog/ChooseListDialog.java">ChooseListDialog</a></td>
<td style="text-align:left">屏幕中间弹出选择列表，数据源集合使用泛型，可适用于多种数据格式的集合数据源</td>
</tr>
</tbody>
</table>
<h2 id="http">http</h2>
<blockquote>
<p>http接口请求，链式调用，支持get、post、post上传文件、delete、put、根据tag随时取消请求、随时更换baseUrl</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/http/Api.java">Api</a></td>
<td style="text-align:left">http请求的操作类，支持get、post（form、json、form+file）、delete（form、json）、put(form、json)等请求，根据tag取消请求</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/http/ApiInitialize.java">ApiInitialize</a></td>
<td style="text-align:left">提供http请求的初始化操作，初始化OkHttp、设置baseUrl、开启debug日志输出</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/http/ApiCallBack.java">ApiCallBack</a></td>
<td style="text-align:left">http请求结果的回调类，支持请求前、请求成功、请求失败、请求取消、请求结束</td>
</tr>
</tbody>
</table>
<h2 id="easypermission">EasyPermission</h2>
<blockquote>
<p>只需三行代码即可完成权限申请处理</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/permission/EasyPermission.java">EasyPermission</a></td>
<td style="text-align:left">权限申请处理工具类</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/permission/OnEasyPermissionListener.java">OnEasyPermissionListener</a></td>
<td style="text-align:left">权限申请结果回调</td>
</tr>
</tbody>
</table>
<h2 id="自定义view">自定义view</h2>
<blockquote>
<p>收集一些常用的自定义View</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/view/CircleImageView.java">CircleImageView</a></td>
<td style="text-align:left">圆形的ImageView</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/view/ImageSquareView.java">ImageSquareView</a></td>
<td style="text-align:left">正方形的ImageView（高度由宽度决定）</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/view/PickerView">PickerView</a></td>
<td style="text-align:left">类似于NumberPicker的选择器</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/view/RoundImageView.java">RoundImageView</a></td>
<td style="text-align:left">圆角的ImageView</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/lsmya/AndroidLibrary/blob/master/library/src/main/java/android/library/util/view/ShapeTextView.java">ShapeTextView</a></td>
<td style="text-align:left">支持圆角、边框的TextView,无需编写drawable文件</td>
</tr>
</tbody>
</table>
<h2 id="license">License</h2>
<ol>
<li>Under the MIT license. See the <a href="https://github.com/wildfirechat/mars/blob/firechat/LICENSE">LICENSE</a> file for details.</li>
<li>Under the 996ICU License. See the <a href="https://github.com/996icu/996.ICU/blob/master/LICENSE">LICENSE</a> file for details.</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[svn连接https报错问题: E230001: Server SSL certificate verification failed: certificate issued]]></title>
        <id>https://lsmya.github.io/post/4nYuIAmMV</id>
        <link href="https://lsmya.github.io/post/4nYuIAmMV">
        </link>
        <updated>2019-06-04T06:30:15.000Z</updated>
        <content type="html"><![CDATA[<p>打开终端，输入以下命令后回车：</p>
<pre><code>svn ls url
</code></pre>
<p><code>url</code>需要改为svn的项目地址
执行完成后最后一行会显示：</p>
<pre><code>(R)eject, accept (t)emporarily or accept (p)ermanently?
</code></pre>
<p>在 ? 后面输入 <code>p</code>  然后回车，最后根据提示信息输入对应svn账号的密码即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android APP应用启动页白屏优化(StartingWindow)]]></title>
        <id>https://lsmya.github.io/post/BB2sAujIU</id>
        <link href="https://lsmya.github.io/post/BB2sAujIU">
        </link>
        <updated>2019-05-29T08:37:20.000Z</updated>
        <content type="html"><![CDATA[<p>StartingWindow 的处理方式大概有三种：在此推荐第二种方式，着重介绍一下第二种方式，即：自己定制简单的StartingWindow，越简单越好，</p>
<h4 id="使用系统默认的startingwindow">使用系统默认的StartingWindow</h4>
<p>用户点了应用图标启动应用，马上弹出系统默认的StartingWindow，等应用加载好第一帧之后，StartingWindow消失，显示应用第一帧，无缝衔接，体验还不错，这也是通常大部分 Android 应用的场景；</p>
<h4 id="自己定制简单的-startingwindow">自己定制简单的 StartingWindow</h4>
<p>用户点了应用图标启动应用，弹出应用自己定制的StartingWindow，等应用加载好第一帧之后，定制的 StartingWindow 消失，显示应用主界面，由于StartingWindow是自己定制的，启动的时候 Decode Bitmap 或者 Inflate 自定义 Layout 会有一定的耗时，但是总的来说与系统默认的差别不大，用户体验挺好</p>
<ul>
<li>在style.xml中添加以下代码</li>
</ul>
<pre><code>&lt;style name=&quot;StartingTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;
	&lt;!-- 可以设置为颜色 --&gt;
	&lt;!--&lt;item name=&quot;android:windowBackground&quot;&gt;@color/red&lt;/item&gt;--&gt;
	&lt;!--可以设置成一张图片 --&gt;
	&lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/image&lt;/item&gt;
&lt;/style&gt;
</code></pre>
<ul>
<li>在AndroidManifest.xml中给启动activity设置自定义的theme</li>
</ul>
<pre><code>&lt;activity
    android:name=&quot;.MainActivity&quot;
    android:theme=&quot;@style/StartingTheme&quot;&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre>
<h4 id="把startingwindow禁掉或者设置透明">把StartingWindow禁掉或者设置透明</h4>
<p>用户点了应用图标启动应用，由于StartingWindow被禁掉或者被设置透明，所以会出现点击图标后，除了图标黑一下之外没有任何响应，过一会（取决于应用第一帧的加载速度，几秒的时间），直接显示应用主界面。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ImageView的scaleType属性]]></title>
        <id>https://lsmya.github.io/post/k99RZfK</id>
        <link href="https://lsmya.github.io/post/k99RZfK">
        </link>
        <updated>2019-05-16T10:03:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1androidscaletypecenter">1.android:scaleType=&quot;center&quot;</h3>
<p>保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size时，多出来的部分被截掉。</p>
<h3 id="2androidscaletypecenterinside">2.android:scaleType=&quot;centerInside&quot;</h3>
<p>以原图正常显示为目的，如果原图大小大于ImageView的size，就按照比例缩小原图的宽高，居中显示在ImageView中。如果原图size小于ImageView的size，则不做处理居中显示图片。</p>
<h3 id="3androidscaletypecentercrop">3.android:scaleType=&quot;centerCrop&quot;</h3>
<p>以原图填满ImageView为目的，如果原图size大于ImageView的size，则与center_inside一样，按比例缩小，居中显示在ImageView上。如果原图size小于ImageView的size，则按比例拉升原图的宽和高，填充ImageView居中显示。</p>
<h3 id="4androidscaletypematrix">4.android:scaleType=&quot;matrix&quot;</h3>
<p>不改变原图的大小，从ImageView的左上角开始绘制，超出部分做剪切处理。</p>
<h3 id="5androdscaletypefitxy">5.androd:scaleType=&quot;fitXY&quot;</h3>
<p>把图片按照指定的大小在ImageView中显示，拉伸显示图片，不保持原比例，填满ImageView.</p>
<h3 id="6androidscaletypefitstart">6.android:scaleType=&quot;fitStart&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageView的start（前部/上部）。</p>
<h3 id="7androidsacletypefitcenter">7.android:sacleType=&quot;fitCenter&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageView的center（中部/居中显示）。</p>
<h3 id="8androidscaletypefitend">8.android:scaleType=&quot;fitEnd&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageVIew的end（后部/尾部/底部）</p>
<p>效果图：
<img src="https://lsmya.github.io/post-images/1558318886658.png" alt="">
原图：
<img src="https://lsmya.github.io/post-images/1558318892111.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[无法通过“application/vnd.android.package-archive” action安装应用]]></title>
        <id>https://lsmya.github.io/post/DM3QDjJEx</id>
        <link href="https://lsmya.github.io/post/DM3QDjJEx">
        </link>
        <updated>2019-05-16T08:00:27.000Z</updated>
        <content type="html"><![CDATA[<p>targetsdkversion大于25必须声明REQUEST_INSTALL_PACKAGES权限</p>
<h3 id="解决办法">解决办法</h3>
<p>在AndroidManifest中加入</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot; /&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[targetSdkVersion 28 http请求报错CLEARTEXT communication to *** not permitted by network security policy]]></title>
        <id>https://lsmya.github.io/post/cB7Rhv9_D</id>
        <link href="https://lsmya.github.io/post/cB7Rhv9_D">
        </link>
        <updated>2019-05-16T07:53:16.000Z</updated>
        <content type="html"><![CDATA[<p>从6.0开始Android引入了对Https的推荐支持，但是P（api28）的系统上面默认所有Http的请求都被拦截
<application android:usesCleartextTraffic="true|false">
原本这个属性的默认值为true</p>
<h3 id="解决办法">解决办法</h3>
<p>在AnroidManifest.xml中的application添加：</p>
<pre><code>&lt;application android:usesCleartextTraffic=&quot;true&quot;&gt;
</code></pre>
<p>但是更好的解决办法是在应用程序中使用https的请求</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[recyclerView的item点击事件在onCreateViewHolder中写和在onBindViewHolder中写有何区别？如何优化？]]></title>
        <id>https://lsmya.github.io/post/Ibf3l7ix0</id>
        <link href="https://lsmya.github.io/post/Ibf3l7ix0">
        </link>
        <updated>2019-05-13T01:58:11.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h5 id="1在oncreateviewholder中写">1.在onCreateViewHolder中写</h5>
</li>
</ul>
<pre><code>@NonNull
@Override
public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
    final View view = LayoutInflater.from(mContext).inflate(R.layout.item, parent, false);
    final ViewHolder holder = new ViewHolder(view);
    view.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (listener != null) {
                listener.onItemClick(view, holder.getLayoutPosition());
            }
        }
    });
    return holder;
}
</code></pre>
<ul>
<li>
<h5 id="2在onbindviewholder中写">2.在onBindViewHolder中写</h5>
</li>
</ul>
<pre><code>@Override
public void onBindViewHolder(@NonNull final ViewHolder holder, int position) {
    holder.itemView.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (listener != null) {
                listener.onItemClick(holder.itemView, position);
            }
        }
    });
}
</code></pre>
<p>在onBindViewHolder中会频繁的创建新的onClickListener实例，建议在onCreateViewHolder中为新建的 View 设置点击事件</p>
]]></content>
    </entry>
</feed>