<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lsmya.github.io</id>
    <title>小书本</title>
    <updated>2019-05-29T09:07:28.453Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lsmya.github.io"/>
    <link rel="self" href="https://lsmya.github.io/atom.xml"/>
    <subtitle>&lt;p style=&quot;text-align: center&quot;&gt;小可爱一起嗨吗&lt;/p&gt;</subtitle>
    <logo>https://lsmya.github.io/images/avatar.png</logo>
    <icon>https://lsmya.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 小书本</rights>
    <entry>
        <title type="html"><![CDATA[Android APP应用启动页白屏优化(StartingWindow)]]></title>
        <id>https://lsmya.github.io/post/BB2sAujIU</id>
        <link href="https://lsmya.github.io/post/BB2sAujIU">
        </link>
        <updated>2019-05-29T08:37:20.000Z</updated>
        <content type="html"><![CDATA[<p>StartingWindow 的处理方式大概有三种：在此推荐第二种方式，着重介绍一下第二种方式，即：自己定制简单的StartingWindow，越简单越好，</p>
<h4 id="使用系统默认的startingwindow">使用系统默认的StartingWindow</h4>
<p>用户点了应用图标启动应用，马上弹出系统默认的StartingWindow，等应用加载好第一帧之后，StartingWindow消失，显示应用第一帧，无缝衔接，体验还不错，这也是通常大部分 Android 应用的场景；</p>
<h4 id="自己定制简单的-startingwindow">自己定制简单的 StartingWindow</h4>
<p>用户点了应用图标启动应用，弹出应用自己定制的StartingWindow，等应用加载好第一帧之后，定制的 StartingWindow 消失，显示应用主界面，由于StartingWindow是自己定制的，启动的时候 Decode Bitmap 或者 Inflate 自定义 Layout 会有一定的耗时，但是总的来说与系统默认的差别不大，用户体验挺好</p>
<ul>
<li>在style.xml中添加以下代码</li>
</ul>
<pre><code>&lt;style name=&quot;StartingTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;
	&lt;!-- 可以设置为颜色 --&gt;
	&lt;!--&lt;item name=&quot;android:windowBackground&quot;&gt;@color/red&lt;/item&gt;--&gt;
	&lt;!--可以设置成一张图片 --&gt;
	&lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/image&lt;/item&gt;
&lt;/style&gt;
</code></pre>
<ul>
<li>在AndroidManifest.xml中给启动activity设置自定义的theme</li>
</ul>
<pre><code>&lt;activity
    android:name=&quot;.MainActivity&quot;
    android:theme=&quot;@style/StartingTheme&quot;&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre>
<h4 id="把startingwindow禁掉或者设置透明">把StartingWindow禁掉或者设置透明</h4>
<p>用户点了应用图标启动应用，由于StartingWindow被禁掉或者被设置透明，所以会出现点击图标后，除了图标黑一下之外没有任何响应，过一会（取决于应用第一帧的加载速度，几秒的时间），直接显示应用主界面。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ImageView的scaleType属性]]></title>
        <id>https://lsmya.github.io/post/k99RZfK</id>
        <link href="https://lsmya.github.io/post/k99RZfK">
        </link>
        <updated>2019-05-16T10:03:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1androidscaletypecenter">1.android:scaleType=&quot;center&quot;</h3>
<p>保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size时，多出来的部分被截掉。</p>
<h3 id="2androidscaletypecenterinside">2.android:scaleType=&quot;centerInside&quot;</h3>
<p>以原图正常显示为目的，如果原图大小大于ImageView的size，就按照比例缩小原图的宽高，居中显示在ImageView中。如果原图size小于ImageView的size，则不做处理居中显示图片。</p>
<h3 id="3androidscaletypecentercrop">3.android:scaleType=&quot;centerCrop&quot;</h3>
<p>以原图填满ImageView为目的，如果原图size大于ImageView的size，则与center_inside一样，按比例缩小，居中显示在ImageView上。如果原图size小于ImageView的size，则按比例拉升原图的宽和高，填充ImageView居中显示。</p>
<h3 id="4androidscaletypematrix">4.android:scaleType=&quot;matrix&quot;</h3>
<p>不改变原图的大小，从ImageView的左上角开始绘制，超出部分做剪切处理。</p>
<h3 id="5androdscaletypefitxy">5.androd:scaleType=&quot;fitXY&quot;</h3>
<p>把图片按照指定的大小在ImageView中显示，拉伸显示图片，不保持原比例，填满ImageView.</p>
<h3 id="6androidscaletypefitstart">6.android:scaleType=&quot;fitStart&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageView的start（前部/上部）。</p>
<h3 id="7androidsacletypefitcenter">7.android:sacleType=&quot;fitCenter&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageView的center（中部/居中显示）。</p>
<h3 id="8androidscaletypefitend">8.android:scaleType=&quot;fitEnd&quot;</h3>
<p>把原图按照比例放大缩小到ImageView的高度，显示在ImageVIew的end（后部/尾部/底部）</p>
<p>效果图：
<img src="https://lsmya.github.io/post-images/1558318886658.png" alt="">
原图：
<img src="https://lsmya.github.io/post-images/1558318892111.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[无法通过“application/vnd.android.package-archive” action安装应用]]></title>
        <id>https://lsmya.github.io/post/DM3QDjJEx</id>
        <link href="https://lsmya.github.io/post/DM3QDjJEx">
        </link>
        <updated>2019-05-16T08:00:27.000Z</updated>
        <content type="html"><![CDATA[<p>targetsdkversion大于25必须声明REQUEST_INSTALL_PACKAGES权限</p>
<h3 id="解决办法">解决办法</h3>
<p>在AndroidManifest中加入</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot; /&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[targetSdkVersion 28 http请求报错CLEARTEXT communication to *** not permitted by network security policy]]></title>
        <id>https://lsmya.github.io/post/cB7Rhv9_D</id>
        <link href="https://lsmya.github.io/post/cB7Rhv9_D">
        </link>
        <updated>2019-05-16T07:53:16.000Z</updated>
        <content type="html"><![CDATA[<p>从6.0开始Android引入了对Https的推荐支持，但是P（api28）的系统上面默认所有Http的请求都被拦截
<application android:usesCleartextTraffic="true|false">
原本这个属性的默认值为true</p>
<h3 id="解决办法">解决办法</h3>
<p>在AnroidManifest.xml中的application添加：</p>
<pre><code>&lt;application android:usesCleartextTraffic=&quot;true&quot;&gt;
</code></pre>
<p>但是更好的解决办法是在应用程序中使用https的请求</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[recyclerView的item点击事件在onCreateViewHolder中写和在onBindViewHolder中写有何区别？如何优化？]]></title>
        <id>https://lsmya.github.io/post/Ibf3l7ix0</id>
        <link href="https://lsmya.github.io/post/Ibf3l7ix0">
        </link>
        <updated>2019-05-13T01:58:11.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h5 id="1在oncreateviewholder中写">1.在onCreateViewHolder中写</h5>
</li>
</ul>
<pre><code>@NonNull
@Override
public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
    final View view = LayoutInflater.from(mContext).inflate(R.layout.item, parent, false);
    final ViewHolder holder = new ViewHolder(view);
    view.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (listener != null) {
                listener.onItemClick(view, holder.getLayoutPosition());
            }
        }
    });
    return holder;
}
</code></pre>
<ul>
<li>
<h5 id="2在onbindviewholder中写">2.在onBindViewHolder中写</h5>
</li>
</ul>
<pre><code>@Override
public void onBindViewHolder(@NonNull final ViewHolder holder, int position) {
    holder.itemView.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (listener != null) {
                listener.onItemClick(holder.itemView, position);
            }
        }
    });
}
</code></pre>
<p>在onBindViewHolder中会频繁的创建新的onClickListener实例，建议在onCreateViewHolder中为新建的 View 设置点击事件</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[xcode控制台打印 CUIThemeStore：No theme registered with id=0]]></title>
        <id>https://lsmya.github.io/post/IdZIG9X8L</id>
        <link href="https://lsmya.github.io/post/IdZIG9X8L">
        </link>
        <updated>2019-05-09T03:34:36.000Z</updated>
        <content type="html"><![CDATA[<p>在 Assets.xcassets 文件夹中添加AppIcon之后，Xcode控制台就不会再打印CUIThemeStore: No theme registered with id=0</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ios--解决 Reading from private effective user settings]]></title>
        <id>https://lsmya.github.io/post/AsZIYRD5z</id>
        <link href="https://lsmya.github.io/post/AsZIYRD5z">
        </link>
        <updated>2019-05-09T03:12:23.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>在Xcode顶部菜单栏选择：Product --&gt; Scheme --&gt; Edit Scheme</li>
<li>在左边的菜单栏中选择：Run --&gt; Arguments</li>
<li>在 Environment Variables 点击添加按钮，添加变量名为 OS_ACTIVITY_MODE 的变量，Value为 NO</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android第三方登录（QQ、WeChat）]]></title>
        <id>https://lsmya.github.io/post/androidLogin</id>
        <link href="https://lsmya.github.io/post/androidLogin">
        </link>
        <updated>2019-04-30T07:16:09.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://github.com/lsmya/LoginDemo">GitHub地址</a></p>
<h3 id="支持微信-qq-微博等第三方登录">支持微信、QQ、微博等第三方登录</h3>
<pre><code>api 'com.github:otherlogin:+'
</code></pre>
<p><a href="https://bintray.com/lovelylsmya/maven/otherlogin/_latestVersion"> <img src="https://api.bintray.com/packages/lovelylsmya/maven/otherlogin/images/download.svg" alt="Download"> </a></p>
<h4 id="1-微信登录">1、微信登录</h4>
<ul>
<li>注册微信APP_ID：</li>
</ul>
<pre><code>IWXAPI iwxapi = WeChatUtil.register(this, WXAPP_ID);
</code></pre>
<ul>
<li>在需要打开微信的地方使用(需要传入注册时返回的IWXAPI)：</li>
</ul>
<pre><code> WeChatUtil.openWeChat(iwxapi);
</code></pre>
<ul>
<li>在根目录下新建wxapi文件夹，里面新建一个activity（WXEntryActivity）继承自BaseWXEntryActivity</li>
</ul>
<pre><code>public class WXEntryActivity extends BaseWXEntryActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wxentry);
    }
    @Override
    public void success(BaseResp baseResp, SendAuth.Resp resp) {
        //打开微信并回调成功
    }
    @Override
    public void cancel(BaseResp baseResp, SendAuth.Resp resp) {
        //打开微信后取消
    }
    @Override
    public void denied(BaseResp baseResp, SendAuth.Resp resp) {
        //打开微信被拒绝
    }
}

</code></pre>
<h4 id="2-qq登录">2、QQ登录</h4>
<ul>
<li>打开手机QQ</li>
</ul>
<pre><code>Tencentutil.openQQ(MainActivity.this, &quot;app_id&quot;, iUiListener);
</code></pre>
<ul>
<li>在onActivityResult回调中增加如下代码：</li>
</ul>
<pre><code>if (requestCode == 11101){
    Tencent.onActivityResultData(requestCode, resultCode, data, iUiListener);
}
</code></pre>
<ul>
<li>修改主工程的build.gradle文件，android标签内的defaultConfig里面增加如下代码：</li>
</ul>
<pre><code>manifestPlaceholders = [tencent_app_id: &quot;你的appId&quot;]
</code></pre>
<ul>
<li>打开手机QQ时传入的IUiListener对象的onComplete(Object o)方法会返回你想要的数据</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android使用Lambda表达式]]></title>
        <id>https://lsmya.github.io/post/-tCqrpiVs</id>
        <link href="https://lsmya.github.io/post/-tCqrpiVs">
        </link>
        <updated>2019-04-25T03:53:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="jdk-8以上">JDK 8以上</h3>
<h3 id="在主工程的buildgradle中的buildtypes下添加">在主工程的build.gradle中的buildTypes下添加</h3>
<pre><code> compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
</code></pre>
<h3 id="在主工程添加完之后记得在module里面添加一下要不然会报错不知大家有没有遇到">在主工程添加完之后记得在Module里面添加一下，要不然会报错，不知大家有没有遇到</h3>
<h3 id="代码混淆">代码混淆</h3>
<pre><code>-dontwarn java.lang.invoke.*
-dontwarn **$$Lambda$*
</code></pre>
<p>到此就可以使用Lambda表达式了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android 依赖库发布（上传 Library 到 JCenter）]]></title>
        <id>https://lsmya.github.io/post/lgewWsqKB</id>
        <link href="https://lsmya.github.io/post/lgewWsqKB">
        </link>
        <updated>2019-04-25T03:48:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1注册-bintray">1.注册<a href="https://bintray.com"> Bintray</a></h3>
<p>注册时要注意哦，千万不要注册成组织的账户，一定要注册为个人。因为组织账户只有一个月的免费使用时间。
个人账户注册地址：https://bintray.com/signup/oss
有Github、Google、Twitter账号的可以直接登录哦</p>
<h3 id="2创建maven仓库仓库名可自定义">2.创建Maven仓库（仓库名可自定义）</h3>
<p>个人首页中点击Add New Repository，仓库名必须为：maven ，否则使用命令行提交时会报错
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a811411c3?w=500&amp;h=500&amp;f=png&amp;s=9889" alt="">
然后填完基本信息后点击create，这样就创建了仓库。</p>
<h3 id="3配置项目">3.配置项目</h3>
<p>在项目的build.gradle中配置如下：</p>
<pre><code>buildscript {
    ext.kotlin_version = '1.2.51'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;

        classpath 'com.novoda:bintray-release:0.8.1'
        //AS3.0以上版本使用时com.novoda:bintray-release使用最新版本
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs &lt;&lt; &quot;-Xlint:unchecked&quot; &lt;&lt; &quot;-Xlint:deprecation&quot;
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
//依赖中有中文注释,防止乱码
allprojects {
    tasks.withType(Javadoc) {
        options {
            encoding &quot;UTF-8&quot;
            charSet 'UTF-8'
            links &quot;http://docs.oracle.com/javase/7/docs/api&quot;
        }
    }
}
//含有kotlin类时需要添加
tasks.getByPath(&quot;:${library依赖名}:releaseAndroidJavadocs&quot;).enabled = false
</code></pre>
<p>注意：
bintray-release对应的Gradle版本：</p>
<pre><code>bintray-releas version   0.9  对应 Gradle  是 version  5.1.1
bintray-releas version   0.8.0+  对应 Gradle  是 version  4.1+ (包括4.1)(4.5 不适用)
bintray-releas version   0.7.0  对应 Gradle  是 version  4.1+ (包括4.1)
bintray-releas version   0.6.1  对应 Gradle  是 version  4.1+ (包括4.1)
bintray-releas version   0.5.0  对应 Gradle  是 version  3.4+ (包括3.4)
bintray-releas version   0.4.0  对应 Gradle  是 version  3.3+ (包括3.3)
bintray-releas version   0.3.4  对应 Gradle  是 version  1.3.0+(包括1.3)
</code></pre>
<p>要发布的 module 下的 build.gradle 中添加如下配置：</p>
<pre><code>apply plugin: 'com.novoda.bintray-release'

//添加
publish {
    repoName=&quot;maven&quot;//仓库名，没有填写时默认仓库是maven
    userOrg = 'lsmya'//bintray.com用户名
    groupId = 'cn.lsmya.fastframe'//jcenter上的路径
    artifactId = 'fastframe'//项目名称
    publishVersion = '1.0.1'//版本号
    desc = 'Android rapid development framework'//描述
    website = 'https://github.com/lsmya/fastFrame'//github上的地址
}
</code></pre>
<p>apikey的获取：
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a814b3569?w=236&amp;h=269&amp;f=png&amp;s=18879" alt="image.png">
点击Edit Profile，然后左侧菜单列表找到API Key，点击show即可查看，也可点击show右边的按钮复制到剪切板
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a816b59ca?w=907&amp;h=425&amp;f=png&amp;s=32385" alt="image.png"></p>
<p>完成三个地方的配置后，就可以通过命令把项目上传到 Bintray 了。</p>
<h3 id="4上传项目到bintray">4.上传项目到Bintray</h3>
<p>在Android Studio的终端（Terminal）中使用命令行:
Win请使用：</p>
<pre><code>gradlew clean build bintrayUpload  -PbintrayUser=${your_username}  -PbintrayKey=${your_apikey}  -PdryRun=false
</code></pre>
<p>Mac请使用：</p>
<pre><code>./gradlew clean build bintrayUpload  -PbintrayUser=${your_username}  -PbintrayKey=${your_apikey}   -PdryRun=false
</code></pre>
<p>PbintrayUser：登录binary网站的用户名。
PbintrayKey：上面提到的apikey。
dryRun：一个配置参数，当为true的时候，会进行所有步骤，但是不会上传到binary。</p>
<p>回车之后等待编译打包，出现 BUILD SUCCESS，则表示上传成功。
回到Bintray的首页点击之前创建的Maven仓库就可以看到上传的library了</p>
<h3 id="5将项目发布到jcenter">5.将项目发布到JCenter</h3>
<p>点击Add to JCenter，在新页面中点击Send，之后就等待Bintrary的审核吧，如果审核通过会以邮件通知你。
<img src="https://user-gold-cdn.xitu.io/2019/1/9/1683160a816f91b0?w=1179&amp;h=714&amp;f=png&amp;s=94905" alt=""></p>
]]></content>
    </entry>
</feed>